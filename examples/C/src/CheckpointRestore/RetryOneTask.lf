/**
 * This project implements a fault-tolerant task execution model using checkpoint and retry
 * mechanisms, and predictive task dropping. The system is designed to simulate execution of
 * multi-segment tasks with faults using logical execution time.
 *
 * 1. Checkpointed Task Execution: Tasks are divided into segments, each with its own worst-case and
 * optimistic execution time. Faults are simulated with probabilistic failures, and task is restored
 * from the checkpoint when fails.
 *
 * 2. Predictive Task Dropping: Upon segment failure, the system evaluates whether retrying will
 * still meet the task's deadline and only proceeds if the deadline constraint is preserved.
 *
 * The purpose of this design is to investigate how logic-based scheduling and retry policies can
 * improve reliability in real-time embedded systems.
 *
 * @author Dongha Kim
 */
target C {
  timeout: 9900 msec
}

import TaskTemplate, CheckDeadlineAndRetry, TaskScheduler from "lib/RetryTask.lf"

reactor Task1 extends TaskTemplate {
  preamble {=
    #define TASK1_SLEEP_MSEC  200
    #define TASK2_SLEEP_MSEC  200
    #define TASK3_SLEEP_MSEC  200
    #define FAILURE_RATE 80 // 80% chance

    int seg1() {
      lf_sleep(MSEC(TASK1_SLEEP_MSEC));
      return (rand() % 100 < FAILURE_RATE) ? 1 : 0;
    }
    int seg2() {
      lf_sleep(MSEC(TASK2_SLEEP_MSEC));
      return (rand() % 100 < FAILURE_RATE) ? 2 : 0;
    }
    int seg3() {
      lf_sleep(MSEC(TASK3_SLEEP_MSEC));
      return (rand() % 100 < FAILURE_RATE) ? 3 : 0;
    }

    int total_task(int checkpoint) {
      if (checkpoint <= 1 && seg1()) return 1;
      if (checkpoint <= 2 && seg2()) return 2;
      if (checkpoint <= 3 && seg3()) return 3;
      return 0;
    }
  =}
}

main reactor {
  task = new Task1(
      task_num=1,
      dead_line=3000,
      num_of_segs=3,
      wcet = {300, 300, 300},
      optwcet = {250, 250, 250})
  retry = new CheckDeadlineAndRetry()
  scheduler = new TaskScheduler(period = 5000 msec)

  scheduler.out -> task.new_instance
  task.task_info_update -> retry.task_info_update
  task.instance_start_time -> retry.instance_start_time_update
  task.fail -> retry.fail
  retry.out -> task.in after 0
}
