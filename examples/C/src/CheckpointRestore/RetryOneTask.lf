/**
 * This project implements a fault-tolerant task execution model using checkpoint and retry
 * mechanisms, and predictive task dropping. The system is designed to simulate execution of
 * multi-segment tasks with faults using logical execution time.
 *
 * 1. Checkpointed Task Execution: Tasks are divided into segments, each with its own worst-case and
 * optimistic execution time. Faults are simulated with probabilistic failures, and task is restored
 * from the checkpoint when fails.
 *
 * 2. Predictive Task Dropping: Upon segment failure, the system evaluates whether retrying will
 * still meet the task's deadline and only proceeds if the deadline constraint is preserved.
 *
 * The purpose of this design is to investigate how logic-based scheduling and retry policies can
 * improve reliability in real-time embedded systems.
 *
 * @author Dongha Kim
 */
target C {
  timeout: 9900 msec
}

import TaskRetryTemplate, CheckDeadlineAndRetry, TaskScheduler from "lib/TaskRetryTemplate.lf"

reactor Task1<T, U> extends TaskRetryTemplate {
  preamble {=
    #define TASK1_SEG1_SLEEP_MSEC  200
    #define TASK1_SEG2_SLEEP_MSEC  200
    #define TASK1_SEG3_SLEEP_MSEC  200
    #define FAILURE_RATE 80 // 80% chance

    int task1_seg1() {
      lf_sleep(MSEC(TASK1_SEG1_SLEEP_MSEC));
      return (rand() % 100 < FAILURE_RATE) ? 1 : 0;
    }
    int task1_seg2() {
      lf_sleep(MSEC(TASK1_SEG2_SLEEP_MSEC));
      return (rand() % 100 < FAILURE_RATE) ? 2 : 0;
    }
    int task1_seg3() {
      lf_sleep(MSEC(TASK1_SEG3_SLEEP_MSEC));
      return (rand() % 100 < FAILURE_RATE) ? 3 : 0;
    }

    int total_task1(int in, int* out, int checkpoint) {
      // Do something with input.
      if (checkpoint <= 1 && task1_seg1()) return 1;
      if (checkpoint <= 2 && task1_seg2()) return 2;
      if (checkpoint <= 3 && task1_seg3()) return 3;
      // Do something with output.
      *out = 0;
      return 0;
    }
    // int task1_seg1(int in, int* out) {
    //   lf_sleep(MSEC(TASK1_SEG1_SLEEP_MSEC));
    //   *out = in + 1;
    //   return (rand() % 100 < FAILURE_RATE) ? 1 : 0;
    // }
    // int task1_seg2(int in, int* out) {
    //   lf_sleep(MSEC(TASK1_SEG2_SLEEP_MSEC));
    //   *out = in + 2;
    //   return (rand() % 100 < FAILURE_RATE) ? 2 : 0;
    // }
    // int task1_seg3(int in, int* out) {
    //   lf_sleep(MSEC(TASK1_SEG3_SLEEP_MSEC));
    //   *out = in + 3;
    //   return (rand() % 100 < FAILURE_RATE) ? 3 : 0;
    // }

    // int total_task1(int in, int* out, int checkpoint) {
    //   int final_out = 0;
    //   if (checkpoint <= 1 && task1_seg1(in, &final_out)) return 1;
    //   if (checkpoint <= 2 && task1_seg2(final_out, &final_out)) return 2;
    //   if (checkpoint <= 3 && task1_seg3(final_out, &final_out)) return 3;
    //   *out = final_out;
    //   return 0;
    // }
  =}

  reaction(trigger_task) -> calculate_lt {=
    lf_schedule_int(calculate_lt, 0, total_task1(self->task_input, &self->task_output, self->seg_start_num));
  =}
}

main reactor {
  task = new Task1<int, int>(
      task_num=1,
      dead_line=3000,
      num_of_segs=3,
      wcet = {300, 300, 300},
      optwcet = {250, 250, 250})
  retry = new CheckDeadlineAndRetry()
  scheduler = new TaskScheduler<int>(period = 5000 msec, in = 0)

  scheduler.trigger -> task.new_instance
  scheduler.task_input -> task.in
  task.task_info_update -> retry.task_info_update
  task.instance_start_time -> retry.instance_start_time_update
  task.fail -> retry.fail
  retry.out -> task.retry after 0
}
