/** @author Dongha Kim */
target C

preamble {=
  #include <stdlib.h> // rand()
  #include "platform.h" // lf_sleep()
  #ifndef TASK_INFO_T_DEFINED
  #define TASK_INFO_T_DEFINED
  typedef struct task_info_t {
    uint16_t task_num;
    uint16_t dead_line;
    uint16_t num_of_segs;
    uint16_t* wcet;
    uint16_t* optwcet;
  } task_info_t;
  typedef int (*task_fn_t)(int checkpoint);
  #endif
=}

reactor TaskTemplate(
    task_num: uint16_t = 0,
    dead_line: uint16_t = 0,
    num_of_segs: uint16_t = 0,
    wcet: uint16_t[] = {},
    optwcet: uint16_t[] = {}) {
  preamble {=
    int total_task1(int checkpoint);
    int total_task2(int checkpoint);
  =}
  input new_instance: int
  input in: int
  logical action advance_lt: int
  output fail: int
  output instance_start_time: time
  output task_info_update: task_info_t
  state task_info: task_info_t
  state task_fn: task_fn_t

  method set_fn_ptr() {=
    if(self->task_num == 1) {
      self->task_fn = total_task1;
    } else if(self->task_num == 2) {
    self->task_fn = total_task2;
    }
  =}

  reaction(startup) -> task_info_update {=
    self->task_info.task_num = self->task_num;
    set_fn_ptr();
    self->task_info.num_of_segs = self->num_of_segs;
    self->task_info.wcet = self->wcet;
    self->task_info.optwcet = self->optwcet;
    self->task_info.dead_line = self->dead_line;
    lf_set(task_info_update, self->task_info);
  =}

  reaction(new_instance, in) -> advance_lt, instance_start_time {=
    int seg_start_num, num_of_success, failed_seg_num;

    if(in->is_present) {
      // When Retry was triggered. in->value should not be 0.
      seg_start_num = in->value;
    } else {
      // When triggering the next instance.
      if(new_instance->value == 0){
        // Only start when the value is 0.
        seg_start_num = 1; // Start from segment 1.
        lf_set(instance_start_time, lf_time_logical_elapsed());
        // When timer triggers.
        lf_print("**** New instance of task %d starting. Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.\n", self->task_num, lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
      } else {
        return;
      }
    }
    failed_seg_num = self->task_fn(seg_start_num);
    // Calculate the number of successed segments. If failed_seg_num=3 and in seg_start_num=1, 2 segments success.
    num_of_success = failed_seg_num - seg_start_num;
    if (num_of_success < 0) {
      // This means failed_seg_num was 0 and successed to end of task. Recalculate the number of successed segments.
      num_of_success +=  self->task_info.num_of_segs + 1;
    }

    // Schedule logical action to advance time.
    lf_print("TASK%d: Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.", self->task_num, lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));

    // Caluculate the time of the total successed segments.
    int total_success_time = 0; // msecs
    for (int i=0; i < num_of_success; i++){
      total_success_time += self->task_info.optwcet[seg_start_num + i -1];
    }

    if(failed_seg_num == 0) {
      // Task is finished. Advance as much as the sucessed segments.
      lf_schedule_int(advance_lt, total_success_time * MSEC(1), 0);
      lf_print("TASK%d: All segments finished. %d task(s) success. Advancing logical time by %d msecs. \n", self->task_num, num_of_success, total_success_time);
    } else {
      // Segment failed. Advance as much as successed segments + 1 failed segment.
      lf_schedule_int(advance_lt, total_success_time * MSEC(1) + self->task_info.wcet[failed_seg_num - 1] * MSEC(1), failed_seg_num);
      lf_print("TASK%d: Segment %d failed. %d task(s) success. Advancing logical time by %d msecs. \n", self->task_num, failed_seg_num, num_of_success, total_success_time + self->task_info.wcet[failed_seg_num - 1]);
    }
  =}

  reaction(advance_lt) -> fail {=
    lf_set(fail, advance_lt->value);
  =}
}

// Naming? Timely retry?
reactor CheckDeadlineAndRetry {
  input instance_start_time_update: time
  input fail: int
  output out: int
  state instance_start_time: time
  input task_info_update: task_info_t
  state task_info: task_info_t

  reaction(task_info_update) {=
    self->task_info.task_num = task_info_update->value.task_num;
    self->task_info.num_of_segs = task_info_update->value.num_of_segs;
    self->task_info.wcet = task_info_update->value.wcet;
    self->task_info.optwcet = task_info_update->value.optwcet;
    self->task_info.dead_line = task_info_update->value.dead_line;
  =}

  reaction(instance_start_time_update) {=
    // Update the instance start time. This can also be implemented by a message by the Task reactor.
    self->instance_start_time = lf_time_logical_elapsed();
  =}

  reaction(fail) -> out {=
    if(fail->value == 0) {
      // 0 means, all segments are finished. Don't trigger the task again, so do nothing.
      lf_set(out, 0);
    } else {
      // Check deadline in logical time. Does not schedule next retry, when deadline violation.

      // Caluculate the additional time required to finish task.
      int total_success_time = 0; // msecs
      for (int i=fail->value; i <=  self->task_info.num_of_segs; i++){
        total_success_time += self->task_info.optwcet[i - 1];
      }

      instant_t min_instance_finish_time = lf_time_logical_elapsed() + total_success_time * MSEC(1);
      if(min_instance_finish_time > self->instance_start_time + (self->task_info.dead_line * MSEC(1))) {
        lf_print("TASK%d: Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.", self->task_info.task_num, lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
        lf_print("TASK%d: ****Logical time deadline violation predicted.\nDeadline is: %lld msecs, while minimum predicted instance finish time is %lld msecs.\nDropping left over tasks, and giving up instance.\n", self->task_info.task_num, (self->task_info.dead_line * MSEC(1) + self->instance_start_time)/ MSEC(1), min_instance_finish_time / MSEC(1));
        // *****This else if tests when there is no deadline prediction!
        // Don't erase this part.
        // } else if(self->task_info.dead_line * MSEC(1) < lf_time_logical_elapsed() - self->instance_start_time) {
      //   lf_print("\nLogical time deadline violation detected on Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.\nDeadline was: %lld msecs.\n", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1), (self->task_info.dead_line * MSEC(1) + self->instance_start_time)/ MSEC(1));
      } else {
        // Did not violate predicted deadline.
        lf_set(out, fail->value);
      }
    }
  =}
}

reactor TaskScheduler(period: time = 0 msec) {
  timer t(0, period)
  output out: int

  reaction(startup) {=
    srand(time(NULL));
  =}

  reaction(t) -> out {=
    lf_set(out, 0);
  =}
}
