target C {
  timeout: 9900 msec
}

preamble {=
  #include <stdlib.h> // rand()
  #include "platform.h" // lf_sleep()
  #define NUMBER_OF_SEGMENTS 3
  // seg1 wcet, opt wcet.

  #define WCET 300 // In msecs
  #define OPTWCET 250 // In msecs
  #define TASK_DEADLINE 3000
=}

reactor Task(period: time = 0 msec) {
  preamble {=
    #define TASK1_SLEEP_MSEC  200
    #define TASK2_SLEEP_MSEC  200
    #define TASK3_SLEEP_MSEC  200
    #define FAILURE_RATE 80 // 80% chance

    int seg1() {
      lf_sleep(MSEC(TASK1_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 1;
      }
      return 0;
    }
    int seg2() {
      lf_sleep(MSEC(TASK2_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 2;
      }
      return 0;
    }
    int seg3() {
      lf_sleep(MSEC(TASK3_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 3;
      }
      return 0;
    }
    int total_task(int checkpoint) {
      int ret = -1;
      if (checkpoint <= 1) {  // Start from task1 if no checkpoint
        ret = seg1();
        if (ret != 0) {
          return ret; // Return failure checkpoint
        }
      }

      if (checkpoint <= 2) {  // Start from task2 if the previous step succeeded
        ret = seg2();
        if (ret != 0){
          return ret; // Return failure checkpoint
        }
      }
      if (checkpoint <= 3) {  // Start from task2 if the previous step succeeded
        ret = seg3();
        if (ret != 0){
          return ret; // Return failure checkpoint
        }
      }
      return 0;
    }
  =}
  timer t(0, period)
  input in: int
  logical action advance_lt: int
  // output success: int
  output fail: int
  output instance_start_time: time

  reaction(t, in) -> advance_lt, instance_start_time{=
    int num_of_success, failed_task_num;

    if(in->is_present) {
      // When Retry was triggered. in->value should not be 0.
      failed_task_num = total_task(in->value);
      num_of_success = failed_task_num - in->value;
    } else {
      // When timer is triggering the next instance.
      lf_set(instance_start_time, lf_time_logical_elapsed());
      // When timer triggers.
      lf_print("\n**** New instance of task starting. Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.\n", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
      failed_task_num = total_task(1);
      // Calculate the number of successed segments. If failed_task_num=3 and in in=1, 2 segments success.
      num_of_success = failed_task_num - 1;
    }
    if (num_of_success < 0) {
      // This means failed_task_num was 0 and successed to end of task. Recalculate the number of successed segments.
      // lf_set(success, num_of_success + NUMBER_OF_SEGMENTS + 1);
      num_of_success += NUMBER_OF_SEGMENTS + 1;
    }
    lf_print("Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
    if(failed_task_num == 0) {
      // Task is finished. Advance as much as the sucessed segments.
      // TODO: What if different WCET per segment?
      lf_schedule_int(advance_lt, OPTWCET * MSEC(1) * num_of_success, 0);
      lf_print("All segments finished.");
      lf_print("%d task(s) success. Advancing logical time by %lld msecs. \n", num_of_success, OPTWCET * num_of_success);
    } else {
      // Segment failed. Advance as much as successed segments + 1 failed segment.
      lf_schedule_int(advance_lt, OPTWCET * MSEC(1) * num_of_success + WCET * MSEC(1), failed_task_num);
      lf_print("Segment %d failed. %d task(s) success. Advancing logical time by %lld msecs. \n", failed_task_num, num_of_success, OPTWCET * num_of_success + WCET);
    }
    
  =}
  reaction(advance_lt) -> fail {=
    lf_set(fail, advance_lt->value);
  =}
}

reactor Retry {

  input instance_start_time_update: time
  // input success: int
  input fail: int
  output out: int

  state instance_start_time: time

  reaction(instance_start_time_update) {=
    // Update the instance start time. This can also be implemented by a message by the Task reactor.
    self->instance_start_time = lf_time_logical_elapsed();
  =}

  reaction(fail) -> out{=
    if(fail->value == 0) {
      // 0 means, all segments are finished. Don't trigger the task again, so do nothing.
    } else {
      // Check deadline in logical time. Does not schedule next retry, when deadline violation.
      instant_t min_instance_finish_time = lf_time_logical_elapsed() + (NUMBER_OF_SEGMENTS - fail->value + 1) * WCET * MSEC(1);
      if(min_instance_finish_time > self->instance_start_time + (TASK_DEADLINE * MSEC(1))) {
        lf_print("Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
        lf_print("****Logical time deadline violation predicted.\nDeadline is: %lld msecs, while minimum predicted instance finish time is %lld.\nDropping left over tasks, and giving up instance.\n",  (TASK_DEADLINE * MSEC(1) + self->instance_start_time)/ MSEC(1), min_instance_finish_time / MSEC(1));
        // *****This else if tests when there is no deadline prediction! 
        // Don't erase this part.
        // } else if(TASK_DEADLINE * MSEC(1) < lf_time_logical_elapsed() - self->instance_start_time) {
      //   lf_print("\nLogical time deadline violation detected on Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.\nDeadline was: %lld msecs.\n", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1), (TASK_DEADLINE * MSEC(1) + self->instance_start_time)/ MSEC(1));

      } else {
        // Did not violate predicted deadline.
        lf_set(out, fail->value);
      }
    }
  =}
}

main reactor {
  task = new Task(period = 5000 msec)
  retry = new Retry()
  task.instance_start_time->retry.instance_start_time_update
  task.fail -> retry.fail
  retry.out -> task.in after 0

  reaction(startup) {=
    srand(time(NULL));
  =}
}
