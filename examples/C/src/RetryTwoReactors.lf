target C {
  timeout: 9900 msec
}

preamble {=
  #include <stdlib.h> // rand()
  #include "platform.h" // lf_sleep()
  #define NUMBER_OF_SEGMENTS 3
  // seg1 wcet, opt wcet.
=}

reactor Task(period: time = 0 msec) {
  preamble {=
    #define TASK1_SLEEP_MSEC  200
    #define TASK2_SLEEP_MSEC  200
    #define TASK3_SLEEP_MSEC  200
    #define FAILURE_RATE 80 // 80% chance

    int seg1() {
      lf_sleep(MSEC(TASK1_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 1;
      }
      return 0;
    }
    int seg2() {
      lf_sleep(MSEC(TASK2_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 2;
      }
      return 0;
    }
    int seg3() {
      lf_sleep(MSEC(TASK3_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 3;
      }
      return 0;
    }
    int total_task(int checkpoint) {
      int ret = -1;
      if (checkpoint <= 1) {  // Start from task1 if no checkpoint
        ret = seg1();
        if (ret != 0) {
          return ret; // Return failure checkpoint
        }
      }

      if (checkpoint <= 2) {  // Start from task2 if the previous step succeeded
        ret = seg2();
        if (ret != 0){
          return ret; // Return failure checkpoint
        }
      }
      if (checkpoint <= 3) {  // Start from task2 if the previous step succeeded
        ret = seg3();
        if (ret != 0){
          return ret; // Return failure checkpoint
        }
      }
      return 0;
    }
  =}
  timer t(0, period)
  input in: int
  output success: int
  output fail: int
  output instance_start_time: time

  reaction(t, in) -> success, fail, instance_start_time{=
    int temp, ret;

    if(in->is_present) {
      ret = total_task(in->value);
      temp = ret - in->value;
    } else {
      lf_set(instance_start_time, lf_time_logical_elapsed());
      // When timer triggers.
      lf_print("\n**** New instance of task starting. Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.\n", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
      ret = total_task(1);
      // Calculate the number of successed segments. If ret=3 and in in=1, 2 segments success.
      temp = ret - 1;
    }
    lf_set(fail, ret);
    if (temp >= 0) {
      lf_set(success, temp);
    } else if (temp < 0) {
      // This means ret was 0 and successed to end of task. Recalculate the number of successed segments.
      lf_set(success, temp + NUMBER_OF_SEGMENTS + 1);
    }
  =}
}

reactor Retry(
    wcet: time = 20 msec,
    optwcet: time = 20 msec,
    period: time = 0 msec,
    dead_line: time = 0 msec) {
  preamble {=
    // #define NUMBER_OF_SEGMENTS 3
  =}
  timer t(0, period)

  input instance_start_time_update: time
  input success: int
  input fail: int
  output out: int

  logical action check_deadline: int
  logical action trigger: int
  state instance_start_time: time

  reaction(instance_start_time_update) {=
    // Update the instance start time. This can also be implemented by a message by the Task reactor.
    self->instance_start_time = lf_time_logical_elapsed();
  =}
  

  reaction(success, fail) -> check_deadline {=
    lf_print("Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
    if (fail->value == 0) {
      // Task is finished. Advance as much as the sucessed segments.
      // TODO: What if different WCET per segment?
      lf_schedule_int(check_deadline, self->optwcet * success->value, 0);
      lf_print("All segments finished.");
      lf_print("%d task(s) success. Advancing logical time by %lld msecs. \n", success->value, self->optwcet * success->value / MSEC(1));
    } else {
      // Segment failed. Advance as much as successed segments + 1 failed segment.
      lf_schedule_int(check_deadline, self->optwcet * success->value + self->wcet, fail->value);
      lf_print("Segment %d failed. %d task(s) success. Advancing logical time by %lld msecs. \n", fail->value, success->value, (self->optwcet * success->value + self->wcet) / MSEC(1));
    }
  =}

  reaction(check_deadline) -> trigger {=
    if(check_deadline->value == 0) {
      // 0 means, all segments are finished. Don't trigger the task again, so do nothing.
    } else {
      // Check deadline in logical time. Does not schedule next retry, when deadline violation.
      instant_t min_instance_finish_time = lf_time_logical_elapsed() + (NUMBER_OF_SEGMENTS - check_deadline->value + 1) * self->wcet;
      if(min_instance_finish_time > self->instance_start_time + self->dead_line) {
        lf_print("Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
        lf_print("****Logical time deadline violation predicted.\nDeadline is: %lld msecs, while minimum predicted instance finish time is %lld.\nDropping left over tasks, and giving up instance.\n",  (self->dead_line + self->instance_start_time)/ MSEC(1), min_instance_finish_time / MSEC(1));
      } else if(self->dead_line < lf_time_logical_elapsed() - self->instance_start_time) {
        lf_print("\nLogical time deadline violation detected on Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.\nDeadline was: %lld msecs.\n", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1), (self->dead_line + self->instance_start_time)/ MSEC(1));

      } else {
        lf_schedule_int (trigger, 0, check_deadline->value);
      }
    }
  =}

  reaction(trigger) -> out {=
    if(trigger->value == 0) {
      // 0 means, all segments are finished. Don't trigger the task again, so do nothing.
    } else {
      lf_set(out, trigger->value);
    }
  =}
}

main reactor {
  task = new Task(period = 5000 msec)
  retry = new Retry(wcet = 300 msec, optwcet = 250 msec, period = 5000 msec, dead_line = 3000 msec)
  task.instance_start_time->retry.instance_start_time_update
  task.fail -> retry.fail
  task.success -> retry.success
  retry.out -> task.in after 0

  reaction(startup) {=
    srand(time(NULL));
  =}
}
