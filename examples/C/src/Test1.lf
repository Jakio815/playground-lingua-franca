/**
 * Parallel execution on three processes, compare, if two fails, fail program. Does not reexecute.
 * 	1.	Three Count reactors generate numbers independently.
 *	2.	The Compare reactor evaluates these numbers.
 *	3.	The Display reactor prints results based on comparisons.
 * 0: three same, 1: two same, -1: all three different.
 */

target C {
  timeout: 5 sec
}

preamble {=
  #include <stdlib.h> // rand()
  #include <time.h> // time()
=}

reactor Count {
  preamble {=
    int random_number() {
      int ran = rand() % 10;
      if (ran < 2) {  // 90% chance
         return 0;
      } else {
        return ran;
      }
    }
  =}
  timer t(0, 500 msec)
  output out: int

  state count: int = 0

  reaction(startup) {=
    srand(time(NULL));
  =}

  reaction(t) -> out {=
    self->count ++;
    int ran = random_number();
    lf_set(out, self->count + ran);
  =}
}

reactor Compare {
  input x: int
  input y: int
  input z: int

  // output[3] out: int
  output out: int

  reaction(x, y, z) -> out {=
    if (x->is_present && y->is_present && z->is_present) {
        printf("\nComparing values, in logical time: %lld, microstep: %d\n", lf_time_logical_elapsed(), lf_tag().microstep);
        if (x->value == y->value && y->value == z->value) {
          lf_set(out, 0);
        }
        else if (x->value == y->value || y->value == z->value || x->value == z->value) {
          lf_set(out, 1);
        }
        else {
          lf_set(out, -1);
        }
    }
  =}
}

reactor Display {
  input in: int
  reaction(in) {=
    if (in->value == 0) {
      printf("All three values are the same.\n");
    } else if (in -> value  == 1){
      printf("Only two values are the same.\n");
    } else if (in -> value  == -1){
      printf("All three values are different! Failing.\n");
      lf_request_stop();
    }
  =}
}

main reactor {
  count = new[3] Count()
  Comp = new Compare()
  d = new Display()
  count.out -> Comp.x, Comp.y, Comp.z
  Comp.out -> d.in
}
